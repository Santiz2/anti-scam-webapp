// –û—Å–Ω–æ–≤–Ω–æ–π JavaScript —Ñ–∞–π–ª –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

class AntiScamApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        this.tg.expand();
        this.tg.ready();
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã
        this.setTheme();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        this.loadStats();
        this.setupEventListeners();
    }

    setTheme() {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
        this.tg.setHeaderColor('#667eea');
        this.tg.setBackgroundColor('#667eea');
    }

    setupEventListeners() {
        // –ü–æ–∏—Å–∫ –ø–æ Enter
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.searchScammer();
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('search-btn')) {
                this.searchScammer();
            } else if (e.target.classList.contains('evidence-btn')) {
                const reportId = e.target.dataset.reportId;
                this.viewEvidence(reportId);
            } else if (e.target.classList.contains('submit-btn')) {
                this.submitReport();
            }
        });
    }

    async loadStats() {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É –±–æ—Ç—É
            // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
            const stats = {
                pending: 5,
                approved: 127,
                rejected: 12,
                total: 144
            };

            this.updateStats(stats);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
        }
    }

    updateStats(stats) {
        const pendingElement = document.getElementById('pendingCount');
        const approvedElement = document.getElementById('approvedCount');

        if (pendingElement) pendingElement.textContent = stats.pending;
        if (approvedElement) approvedElement.textContent = stats.approved;
    }

    async searchScammer() {
        const query = document.getElementById('searchInput')?.value.trim();
        
        if (!query) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –¥–ª—è –ø–æ–∏—Å–∫–∞', 'warning');
            return;
        }

        this.showLoading();

        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É –±–æ—Ç—É
            // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
            await this.simulateSearch(query);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', 'error');
            this.hideLoading();
        }
    }

    async simulateSearch(query) {
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
        await new Promise(resolve => setTimeout(resolve, 1000));

        const mockResults = this.getMockResults(query);
        this.displayResults(mockResults);
    }

    getMockResults(query) {
        // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const allResults = [
            {
                id: 1,
                username: '@scammer123',
                user_id: '123456789',
                description: '–û–±–º–∞–Ω—É–ª –Ω–∞ 5000 —Ä—É–±–ª–µ–π, –æ–±–µ—â–∞–ª –ø—Ä–æ–¥–∞—Ç—å iPhone, –Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥',
                date: '15.12.2024',
                hasEvidence: true,
                evidenceType: 'photo'
            },
            {
                id: 2,
                username: '@fake_seller',
                user_id: '987654321',
                description: '–ü—Ä–æ–¥–∞–≤–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∏–ª–µ—Ç—ã –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç, –∑–∞–±—Ä–∞–ª –¥–µ–Ω—å–≥–∏ –∏ –∏—Å—á–µ–∑',
                date: '10.12.2024',
                hasEvidence: false
            },
            {
                id: 3,
                username: '@crypto_scam',
                user_id: '555666777',
                description: '–ü—Ä–µ–¥–ª–∞–≥–∞–ª –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –æ–±–µ—â–∞–ª 200% –ø—Ä–∏–±—ã–ª–∏, –Ω–æ –∑–∞–±—Ä–∞–ª –¥–µ–Ω—å–≥–∏',
                date: '08.12.2024',
                hasEvidence: true,
                evidenceType: 'video'
            }
        ];

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
        return allResults.filter(result => 
            result.username.toLowerCase().includes(query.toLowerCase()) ||
            result.user_id.includes(query) ||
            result.description.toLowerCase().includes(query.toLowerCase())
        );
    }

    displayResults(results) {
        const resultsDiv = document.getElementById('results');
        
        if (!results || results.length === 0) {
            resultsDiv.innerHTML = `
                <div class="no-results">
                    <div style="font-size: 48px; margin-bottom: 20px;">üîç</div>
                    <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å</p>
                </div>
            `;
            return;
        }

        let html = '';
        results.forEach(result => {
            html += `
                <div class="result-card" data-report-id="${result.id}">
                    <div class="result-header">
                        <div class="scammer-name">${result.username}</div>
                        <div class="scammer-id">ID: ${result.user_id}</div>
                    </div>
                    <div class="result-description">${result.description}</div>
                    <div class="result-meta">
                        <span>üìÖ ${result.date}</span>
                        ${result.hasEvidence 
                            ? `<button class="evidence-btn" data-report-id="${result.id}">üì∏ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (${result.evidenceType})</button>`
                            : '<span style="color: #999;">üì∏ –ù–µ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤</span>'
                        }
                    </div>
                </div>
            `;
        });

        resultsDiv.innerHTML = html;
    }

    async viewEvidence(reportId) {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
            this.showNotification('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏', 'info');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
            this.tg.sendData(JSON.stringify({
                action: 'view_evidence',
                report_id: reportId
            }));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤', 'error');
        }
    }

    submitReport() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
        this.tg.sendData(JSON.stringify({
            action: 'submit_report'
        }));
        
        this.showNotification('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏...', 'info');
    }

    showLoading() {
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
                <p>–ü–æ–∏—Å–∫ —Å–∫–∞–º–µ—Ä–æ–≤...</p>
            </div>
        `;
    }

    hideLoading() {
        // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingElement = document.querySelector('.loading');
        if (loadingElement) {
            loadingElement.remove();
        }
    }

    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);
        
        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
    handleTelegramData(data) {
        try {
            const parsedData = JSON.parse(data);
            
            switch (parsedData.action) {
                case 'update_stats':
                    this.updateStats(parsedData.stats);
                    break;
                case 'search_results':
                    this.displayResults(parsedData.results);
                    break;
                case 'show_evidence':
                    this.displayEvidence(parsedData.evidence);
                    break;
                default:
                    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', parsedData.action);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram:', error);
        }
    }

    displayEvidence(evidence) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content">
                <h3>üì∏ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞</h3>
                <p>–¢–∏–ø: ${evidence.type}</p>
                <p>–†–∞–∑–º–µ—Ä: ${evidence.size}</p>
                <button class="action-btn" onclick="this.parentElement.parentElement.remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        setTimeout(() => {
            modal.classList.add('show');
        }, 100);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
    sendToTelegram(data) {
        this.tg.sendData(JSON.stringify(data));
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    closeApp() {
        this.tg.close();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–ª–µ—Ä—Ç–∞
    showAlert(message) {
        this.tg.showAlert(message);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    showConfirm(message, callback) {
        this.tg.showConfirm(message, callback);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.antiScamApp = new AntiScamApp();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
window.addEventListener('message', (event) => {
    if (window.antiScamApp && event.data) {
        window.antiScamApp.handleTelegramData(event.data);
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.searchScammer = function() {
    if (window.antiScamApp) {
        window.antiScamApp.searchScammer();
    }
};

window.viewEvidence = function(reportId) {
    if (window.antiScamApp) {
        window.antiScamApp.viewEvidence(reportId);
    }
};

window.submitReport = function() {
    if (window.antiScamApp) {
        window.antiScamApp.submitReport();
    }
}; 