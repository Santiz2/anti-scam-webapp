// –°—Ç—Ä–æ–≥–∏–π JavaScript –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appState = {
    isOnline: false,
    stats: {
        pending: 0,
        approved: 0
    },
    searchResults: []
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
async function checkBotStatus() {
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
        tg.sendData(JSON.stringify({
            action: 'ping'
        }));
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
        setTimeout(() => {
            if (!appState.isOnline) {
                showOfflineState();
            }
        }, 5000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        showOfflineState();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ñ—Ñ–ª–∞–π–Ω
function showOfflineState() {
    const container = document.querySelector('.container');
    container.innerHTML = `
        <div class="header">
            <h1>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤</h1>
            <p>–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π</p>
        </div>
        
        <div class="error-state">
            <h3>–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h3>
            <p>–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
        </div>
        
        <div class="footer">
            <p>¬© 2024 Anti-Scam Database</p>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤
function searchScammer() {
    const query = document.getElementById('searchInput').value.trim();
    
    if (!query) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', 'error');
        return;
    }

    if (!appState.isOnline) {
        showNotification('–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }

    showLoading();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram –±–æ—Ç
    tg.sendData(JSON.stringify({
        action: 'search',
        query: query
    }));
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
function displayResults(results) {
    const resultsDiv = document.getElementById('results');
    
    if (!results || results.length === 0) {
        resultsDiv.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üîç</div>
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å</p>
            </div>
        `;
        return;
    }

    let html = '';
    results.forEach(result => {
        html += `
            <div class="result-card" data-report-id="${result.id}">
                <div class="result-header">
                    <div class="scammer-name">${escapeHtml(result.username)}</div>
                    <div class="scammer-id">ID: ${result.user_id}</div>
                </div>
                <div class="result-description">${escapeHtml(result.description)}</div>
                <div class="result-meta">
                    <span>–î–∞—Ç–∞: ${formatDate(result.date)}</span>
                    ${result.hasEvidence 
                        ? `<button class="evidence-btn" onclick="viewEvidence(${result.id})">–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞</button>`
                        : '<span style="color: #666;">–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</span>'
                    }
                </div>
            </div>
        `;
    });

    resultsDiv.innerHTML = html;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
function viewEvidence(reportId) {
    if (!appState.isOnline) {
        showNotification('–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }

    tg.sendData(JSON.stringify({
        action: 'view_evidence',
        report_id: reportId
    }));
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã
function submitReport() {
    if (!appState.isOnline) {
        showNotification('–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }

    tg.sendData(JSON.stringify({
        action: 'submit_report'
    }));
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function loadStats() {
    if (!appState.isOnline) {
        return;
    }

    tg.sendData(JSON.stringify({
        action: 'get_stats'
    }));
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading() {
    const resultsDiv = document.getElementById('results');
    resultsDiv.innerHTML = `
        <div class="loading">
            <div class="spinner"></div>
            <p>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...</p>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
function showError(message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞') {
    const resultsDiv = document.getElementById('results');
    resultsDiv.innerHTML = `
        <div class="error-state">
            <h3>–û—à–∏–±–∫–∞</h3>
            <p>${message}</p>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.classList.add('show');
    }, 100);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats(stats) {
    if (stats) {
        document.getElementById('pendingCount').textContent = stats.pending || 0;
        document.getElementById('approvedCount').textContent = stats.approved || 0;
        appState.stats = stats;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
function showEvidence(evidence) {
    if (evidence && evidence.url) {
        window.open(evidence.url, '_blank');
    } else {
        showNotification('–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch (error) {
        return dateString;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
function handleTelegramData(data) {
    try {
        switch (data.action) {
            case 'pong':
                appState.isOnline = true;
                loadStats();
                break;
                
            case 'search_results':
                appState.searchResults = data.results || [];
                displayResults(data.results);
                break;
                
            case 'stats':
                updateStats(data.stats);
                break;
                
            case 'show_evidence':
                showEvidence(data.evidence);
                break;
                
            case 'error':
                showError(data.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
                break;
                
            case 'notification':
                showNotification(data.message, data.type || 'info');
                break;
                
            default:
                console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', data.action);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchScammer();
            }
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkBotStatus();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
window.addEventListener('message', function(event) {
    if (event.data) {
        try {
            const data = JSON.parse(event.data);
            handleTelegramData(data);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            showError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.searchScammer = searchScammer;
window.viewEvidence = viewEvidence;
window.submitReport = submitReport;
window.showNotification = showNotification; 